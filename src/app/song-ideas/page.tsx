'use client'; // Required for useEffect and useState

import { useState, useEffect, useRef } from 'react';

// Define an interface for the demo data structure
interface Demo {
  fileName: string;
  relativePath: string;
  timestamp: string; // ISO string format
}

// Helper function to format the timestamp (optional, but nice)
function formatTimestamp(isoString: string): string {
  const date = new Date(isoString);
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  const diffHours = Math.ceil(diffTime / (1000 * 60 * 60));
  const diffMinutes = Math.ceil(diffTime / (1000 * 60));

  if (diffMinutes < 60) {
    return `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;
  } else if (diffHours < 24) {
    return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;
  } else if (diffDays <= 7) {
     return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`;
  } else {
     // Simple date format for older entries
     return date.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
  }
}

// Basic function to clean up the filename for display
function cleanFileName(fileName: string): string {
    // Remove .mp3 extension
    let cleaned = fileName.replace(/\.mp3$/i, '');
    // Replace underscores/hyphens with spaces (optional)
    cleaned = cleaned.replace(/[_-]/g, ' ');
    // Add more cleaning rules if needed (e.g., for mood tags later)
    return cleaned;
}


export default function SongIdeasPage() {
  const [demos, setDemos] = useState<Demo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const currentlyPlayingRef = useRef<HTMLAudioElement | null>(null); // Ref to store the playing audio element

  useEffect(() => {
    // Fetch the demo data from the JSON file generated by the sync script
    fetch('/demos.json')
      .then(response => {
        if (!response.ok) {
          // Handle HTTP errors (like 404 Not Found if the file doesn't exist)
          throw new Error(`Failed to fetch demos.json: ${response.statusText} (Status: ${response.status})`);
        }
        return response.json();
      })
      .then((data: Demo[]) => {
        setDemos(data);
        setIsLoading(false);
      })
      .catch(err => {
        console.error("Error fetching or parsing demos.json:", err);
        // Check if the error message indicates a 404 or similar
        if (err.message.includes('404')) {
             setError("Demo list not found. Try running the sync script first (e.g., 'npm run sync-demos' or 'node scripts/sync-demos.ts').");
        } else {
            setError(`An error occurred fetching demo data: ${err.message}`);
        }
        setIsLoading(false);
      });
  }, []); // Empty dependency array ensures this runs once on mount

  // Function to handle when an audio player starts playing
  const handlePlay = (event: React.SyntheticEvent<HTMLAudioElement, Event>) => {
    const currentAudio = event.currentTarget;
    // If there's another audio playing and it's not the one that just started...
    if (currentlyPlayingRef.current && currentlyPlayingRef.current !== currentAudio) {
      currentlyPlayingRef.current.pause(); // Pause the previous one
    }
    // Update the ref to the currently playing audio
    currentlyPlayingRef.current = currentAudio;
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">straight from dropbox</h1>

      {isLoading && <p>Loading latest demos...</p>}
      {error && <p className="text-red-500">{error}</p>}

      {!isLoading && !error && demos.length === 0 && (
        <p>No demos found. Run the sync script to populate this page.</p>
      )}

      {!isLoading && !error && demos.length > 0 && (
        <ul className="space-y-6">
          {demos.map((demo) => (
            <li key={demo.fileName} className="p-4 border rounded-lg shadow-sm bg-white dark:bg-gray-800 dark:border-gray-700">
              <h2 className="text-xl font-semibold mb-2">{cleanFileName(demo.fileName)}</h2>
              <p className="text-sm text-gray-500 dark:text-gray-400 mb-3">
                Exported: {formatTimestamp(demo.timestamp)}
              </p>
              <div className="mb-3">
                <audio
                    controls
                    src={demo.relativePath}
                    onPlay={handlePlay}
                    className="w-full"
                 >
                  Your browser does not support the audio element.
                </audio>
              </div>
              <a
                href={demo.relativePath}
                download={demo.fileName}
                className="text-blue-600 hover:underline dark:text-blue-400"
              >
                Download MP3
              </a>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
} 