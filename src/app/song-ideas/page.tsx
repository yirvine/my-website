'use client'; // Required for useEffect and useState

import { useState, useEffect, useRef } from 'react';
import Link from 'next/link'; // Import Link for navigation

// Define an interface for the demo data structure
interface Demo {
  fileName: string;
  relativePath: string;
  timestamp: string; // ISO string format
}

// Helper function to format the timestamp (optional, but nice)
function formatTimestamp(isoString: string): string {
  const date = new Date(isoString);
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  const diffHours = Math.ceil(diffTime / (1000 * 60 * 60));
  const diffMinutes = Math.ceil(diffTime / (1000 * 60));

  if (diffMinutes < 60) {
    return `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;
  } else if (diffHours < 24) {
    return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;
  } else if (diffDays <= 7) {
     return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`;
  } else {
     // Simple date format for older entries
     return date.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
  }
}

// Basic function to clean up the filename for display
function cleanFileName(fileName: string): string {
    // Remove .mp3 extension
    let cleaned = fileName.replace(/\.mp3$/i, '');
    // Replace underscores/hyphens with spaces (optional)
    cleaned = cleaned.replace(/[_-]/g, ' ');
    // Add more cleaning rules if needed (e.g., for mood tags later)
    return cleaned;
}


export default function SongIdeasPage() {
  const [demos, setDemos] = useState<Demo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const currentlyPlayingRef = useRef<HTMLAudioElement | null>(null); // Ref to store the playing audio element

  useEffect(() => {
    // Fetch the demo data from the JSON file generated by the sync script
    fetch('/demos.json')
      .then(response => {
        if (!response.ok) {
          // Handle HTTP errors (like 404 Not Found if the file doesn't exist)
          throw new Error(`Failed to fetch demos.json: ${response.statusText} (Status: ${response.status})`);
        }
        return response.json();
      })
      .then((data: Demo[]) => {
        setDemos(data);
        setIsLoading(false);
      })
      .catch(err => {
        console.error("Error fetching or parsing demos.json:", err);
        // Check if the error message indicates a 404 or similar
        if (err.message.includes('404')) {
             setError("Demo list not found. Run 'npm run sync-demos' locally, then commit and push the results.");
        } else {
            setError(`An error occurred fetching demo data: ${err.message}`);
        }
        setIsLoading(false);
      });
  }, []); // Empty dependency array ensures this runs once on mount

  // Function to handle when an audio player starts playing
  const handlePlay = (event: React.SyntheticEvent<HTMLAudioElement, Event>) => {
    const currentAudio = event.currentTarget;
    // If there's another audio playing and it's not the one that just started...
    if (currentlyPlayingRef.current && currentlyPlayingRef.current !== currentAudio) {
      currentlyPlayingRef.current.pause(); // Pause the previous one
    }
    // Update the ref to the currently playing audio
    currentlyPlayingRef.current = currentAudio;
  };

  return (
    // Apply the main site layout classes
    <div className="min-h-screen bg-black text-white">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Add back link */}
        <Link href="/" className="text-1xl font-mono mb-4 block hover:text-yellow-400 transition-colors duration-200">
          &larr; back to home
        </Link>
        {/* Apply mono font to heading */}
        <h1 className="text-4xl font-mono mb-6">song_ideas.mp3</h1>
        <p className="text-gray-400 mb-8">straight from dropbox, some rough, some refined</p>

        {/* Loading/Error/No Demos messages will inherit text-white */}
        {isLoading && <p>Loading latest demos...</p>}
        {error && <p className="text-red-500">{error}</p>}
        {!isLoading && !error && demos.length === 0 && (
            <p>No demos found. Run <code className="bg-gray-700 px-1 py-0.5 rounded text-sm">npm run sync-demos</code> locally, then commit & push.</p>
        )}

        {!isLoading && !error && demos.length > 0 && (
          // Keep the list structure, colors should work well on dark bg
          <ul className="space-y-6">
            {demos.map((demo) => (
              // Use dark background explicitly for list items
              <li key={demo.fileName} className="p-4 border border-gray-700 rounded-lg shadow-sm bg-gray-900"> {/* Adjusted background and border */}
                {/* Make title mono */}
                <h2 className="text-xl font-mono font-semibold mb-2">{cleanFileName(demo.fileName)}</h2>
                 {/* Ensure timestamp has good contrast */}
                <p className="text-sm text-gray-400 mb-3">
                  exported {formatTimestamp(demo.timestamp)}
                </p>
                <div className="mb-3">
                  <audio
                    controls
                    src={demo.relativePath}
                    onPlay={handlePlay}
                    className="w-full"
                  >
                    Your browser does not support the audio element.
                  </audio>
                </div>
                 {/* Link color should be fine */}
                <a
                  href={demo.relativePath}
                  download={demo.fileName}
                  className="text-blue-400 hover:underline font-mono text-sm" // Added font-mono and text-sm for consistency
                >
                  download mp3
                </a>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
} 